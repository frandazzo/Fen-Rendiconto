using System;
using System.Collections.Generic;
using System.Text;

namespace BilancioFenealgest.ServiceLayer.DTO
{
    public class ScrittureDTO
    {
        public string Riferimento1 { get; set; }
        public string Contropartita { get; set; }
        public string Riferimento2 { get; set; }
        public string NumeroPezza { get; set; }
        public string Causale { get; set; }
        public bool AutoGenerated { get; set; }
        public string TipoOperazione { get; set; }
        public decimal Importo { get; set; }
        public string Id { get; set; }
        public DateTime Date { get; set; }
        public string ParentId { get; set; }
        public string ParentName { get; set; }
        public decimal Saldo { get; set; }

        public static int CompareScrittureByPezza(ScrittureDTO x, ScrittureDTO y)
        {

            double xnum = 0;
            double ynum = 0;
            try
            {
                ynum = Convert.ToInt32(y.NumeroPezza);
            }
            catch (Exception)
            {
                ynum = 0;
            }
            try
            {
                xnum = Convert.ToInt32(x.NumeroPezza);
            }
            catch (Exception)
            {
                xnum = 0;
            }


            return xnum.CompareTo(ynum);
            //if (x == null)
            //{
            //    if (y == null)
            //    {
            //        // If x is null and y is null, they're
            //        // equal. 
            //        return 0;
            //    }
            //    else
            //    {
            //        // If x is null and y is not null, y
            //        // is greater. 
            //        return -1;
            //    }
            //}
            //else
            //{
            //    // If x is not null...
            //    //
            //    if (y == null)
            //    // ...and y is null, x is greater.
            //    {
            //        return 1;
            //    }
            //    else
            //    {
            //        // ...and y is not null, compare the 
            //        // lengths of the two strings.
            //        //
            //        int retval = x.Length.CompareTo(y.Length);

            //        if (retval != 0)
            //        {
            //            // If the strings are not of equal length,
            //            // the longer string is greater.
            //            //
            //            return retval;
            //        }
            //        else
            //        {
            //            // If the strings are of equal length,
            //            // sort them with ordinary string comparison.
            //            //
            //            return x.CompareTo(y);
            //        }
            //    }
            //}
        }








        public void Validate()
        {
            if (string.IsNullOrEmpty(Causale))
                throw new Exception("Causale non specificata!");

            if (Importo == 0)
                throw new Exception("Specificare un importo!");
        }

        public ScrittureDTO() { }

        public ScrittureDTO(ScrittureDTO prototype)
        {
            NumeroPezza = prototype.NumeroPezza;
            Importo = prototype.Importo;
            AutoGenerated = prototype.AutoGenerated;
            Causale = prototype.Causale;
            Date = prototype.Date;
            Id = prototype.Id;
            ParentId = prototype.ParentId;
            TipoOperazione = prototype.TipoOperazione;
            Riferimento1 = prototype.Riferimento1;
            Riferimento2 = prototype.Riferimento2;
            Riferimento3 = prototype.Riferimento3;
            Contropartita = prototype.Contropartita;
            IdContropartita = prototype.IdContropartita;
        }

        public static int CompareByDate(ScrittureDTO x, ScrittureDTO y)
        {
            if (x == null)
            {
                if (y == null)
                {
                    // If x is null and y is null, they're
                    // equal. 
                    return 0;
                }
                else
                {
                    // If x is null and y is not null, y
                    // is greater. 
                    return -1;
                }
            }
            else
            {
                // If x is not null...
                //
                if (y == null)
                // ...and y is null, x is greater.
                {
                    return 1;
                }
                else
                {
                    // ...and y is not null, compare the 
                    // lengths of the two strings.
                    //
                    int retval = x.Date.CompareTo(y.Date);

                    if (retval != 0)
                    {
                        // If the strings are not of equal length,
                        // the longer string is greater.
                        //
                        return retval;
                    }
                    else
                    {
                        // If the strings are of equal length,
                        // sort them with ordinary string comparison.
                        //
                        return x.Date.CompareTo(y.Date);
                    }
                }
            }







        }


        public string Riferimento3 { get; set; }

        public string IdContropartita { get; set; }
    }
}
