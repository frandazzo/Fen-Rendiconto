using System;
using System.Collections.Generic;
using System.Text;
using System.Xml.Serialization;
using System.Collections;

namespace BilancioFenealgest.DomainLayer
{
    [Serializable]
    public class Scrittura : AbstractBilancio 
    {


        public Scrittura() 
        { 
            if(string.IsNullOrEmpty(_id))
            {
                
                _id = Guid.NewGuid().ToString(); 
            }
        }




   



        protected override void CalculateList(ref IList<string> result, string propertyName)
        {
            string prop = GetPropertyValue(propertyName);
            if (prop == "")
                return;

            //verifico che il riferimento non sia già presente nella lista
            foreach (string item in result)
            {
                if (item.Trim().ToUpper().Equals(prop))
                    return;
            }

            result.Add(prop);

        }

        private string GetPropertyValue(string propertyName)
        {
            if (propertyName == "Riferimento1")
                return this.Riferimento1.Trim().ToUpper();
            else if (propertyName == "Riferimento2")
                return this.Riferimento2.Trim().ToUpper();
            else if (propertyName == "Riferimento3")
                return this.Riferimento3.Trim().ToUpper();
            else
                return "";
        }



        internal Scrittura(Scrittura scrittura, bool negateImporto, string descrizioneConto)
        {
            _id = scrittura.Id;

            _autoGenerated = true;

            if (negateImporto)
                _importo = scrittura.Importo * -1;
            else
                _importo = scrittura.Importo;

           // _causale = "(CONTO: " + descrizioneConto +")" + scrittura.Causale;
             _causale = "******" + scrittura.Causale;

            _date = scrittura.Date;

            _numeroPezza = scrittura.NumeroPezza;

            _tipoOperazione = scrittura.TipoOperazione;

            _parentId = scrittura.ParentId;

            
        }

        protected override void DoSearch(IList list, ScrittureSearchCriteria criteria)
        {

            if (criteria == null)
            {
                list.Add(this);
                return;
            }


            if (criteria.Matches(this))
                list.Add(this);

        }

        public Scrittura( string parentId)
            : base("",parentId )
        {
            if(string.IsNullOrEmpty(_id))
                _id = Guid.NewGuid().ToString(); 
        }


        public override void Add(AbstractBilancio part)
        {
            throw new InvalidOperationException("Tentativo di aggiungere sottoelementi ad una scrittura");
        }



        

        [XmlIgnore]
        public override bool IsLeaf
        {
            get { return true; }
        }


        private bool _autoGenerated;



        [XmlAttribute("AutoGenerated")]
        public bool AutoGenerated
        {
            get { return _autoGenerated; }
            set { _autoGenerated = value; }
        }



     

        private string _causale = "";
        private string _numeroPezza = "";
        private DateTime _date = DateTime.Now;
        private TipoOperazione _tipoOperazione = TipoOperazione.Banca1;

        private string _riferimento3 = "";//usato per gestione personale
        private string _riferimento2 = "";//usato per gestione ente 
        private string _riferimento1 = "";//usato per gestione settore
        private string _contropartita = "";//usato per tracciare il nome della contropartita

        [XmlAttribute("Contropartita")]
        public string Contropartita
        {
            get
            {
                return _contropartita;
            }
            set
            {
                _contropartita = value;
            }
        }
        [XmlAttribute("Riferimento1")]
        public string Riferimento1
        {
            get
            {
                return _riferimento1;
            }
            set
            {
                if (value != null)
                    _riferimento1 = value.ToUpper();
                else
                    _riferimento1 = null;
            }
        }
         [XmlAttribute("Riferimento2")]
        public string Riferimento2
        {
            get
            {
                return _riferimento2;
            }
            set
            {
                if (value != null)
                    _riferimento2 = value.ToUpper();
                else
                    _riferimento2 = null;
            }
        }
         [XmlAttribute("Riferimento3")]
         public string Riferimento3
         {
             get
             {
                 return _riferimento3;
             }
             set
             {
                 if (value != null)
                     _riferimento3 = value.ToUpper();
                 else
                     _riferimento3 = null;
             }
         }



        protected override double CalculatePartials(ref double total)
        {
            total += _importo;
            return _importo;
        }

        protected  override void CalculatePartials(ref double total, DateTime date)
        {
            if (this.Date.Date <= date.Date)
            {
                total += _importo;
                
            }    
        }


        [XmlAttribute("Causale")]
        public string Causale
        {
            get { return _causale; }
            set{_causale = value;}
        }

        [XmlAttribute("NumeroPezza")]
        public string NumeroPezza
        {
            get { return _numeroPezza; }
            set { _numeroPezza = value; }
        }

        [XmlAttribute("Date")]
        public DateTime Date
        {
            get { return _date; }
            set { _date = value; }
        }

        [XmlAttribute("TipoOperazione ")]
        public TipoOperazione TipoOperazione 
        {
            get { return _tipoOperazione; }
            set { _tipoOperazione = value; }
        }





         [XmlAttribute("IdContropartita ")]
        public string IdContropartita { get; set; }
    }


    public enum TipoOperazione
    {
        Banca1,
        Banca2,
        Banca3,
        Cassa,
        Accantonamento,
        Contropartita
    }




}
