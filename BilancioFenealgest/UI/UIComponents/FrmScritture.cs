using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using BilancioFenealgest.UI.PresentationLogicComponents;
using BilancioFenealgest.ServiceLayer.DTO;
using DevExpress.XtraEditors;
using TestBinding;
using BilancioFenealgest.DomainLayer;

namespace BilancioFenealgest.UI.UIComponents
{
    public partial class FrmScritture : XtraForm, IScrittureFormView
    {
        ScritturePresenter _presenter;
        BilancioFormPresenter _rendicontoPresenter;


        string banca1;
        string banca2;
        string banca3;

        string banca4;
        string banca5;
        string banca6;



        public FrmScritture(BilancioFormPresenter rendicontoPresenter)
        {
            InitializeComponent();
            this._rendicontoPresenter = rendicontoPresenter;

             banca1 = "";
             banca2 = "";
             banca3 = "";

             banca4 = "";
             banca5 = "";
             banca6 = "";


             _rendicontoPresenter.FillNomiBanca(ref banca1, ref banca2, ref banca3, ref banca4, ref banca5, ref banca6);
        }

    
        #region IScrittureFormView Membri di

        public bool IsLabelVisible
        {
            set 
            {
                lblEmpty.Visible = value ;
                if (value)
                //panel2.BringToFront();
                {
                    panelControl1.Controls.SetChildIndex(this.lblEmpty, 0);
                }
                Application.DoEvents();
            }
        }

        public string CaptionViewText
        {
            set { this.Text = value; }
        }

        public BilancioFenealgest.Middleware.IGridContainer<ScrittureDTO> GridContainer
        {
            get { return new DesktopGridContainer<ScrittureDTO>(dataGridView1, bindingSource1 ); }
        }

        
        public void SetPresenter(ScritturePresenter presenter)
        {
            _presenter = presenter;
        }

      
        public bool ShowAndContinue()
        {
            return (base.ShowDialog() == DialogResult.OK);
        }

     
        public IScritturaSingloaView ScritturaSingolaView
        {
            get { return new FrmScritturaSingola(banca1, banca2, banca3, banca4, banca5, banca6); }
        }

     

      

    
        public BilancioFenealgest.Middleware.IMessageBox GetSimpleMessageNotificator()
        {
            return new DesktopMessageBox();
        }

        public BilancioFenealgest.Middleware.IOpenFileClass GetOpenFileDialog()
        {
            throw new NotImplementedException();
        }

     

        public string ElementiTrovati
        {
            set { lblNumero.Text = value; }
        }

        public bool IsMessaggioContoClassificazioneVisible
        {
            set 
            {
                if (!value)
                    layoutControlItem12.Visibility =  DevExpress.XtraLayout.Utils.LayoutVisibility.Never; 
                else
                    layoutControlItem12.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always; 
            }
        }

        public bool IsAddScritturaEnabled
        {
            set { cmdAdd.Enabled = value; }
        }

     
        private void cmdCancelFilter_Click(object sender, EventArgs e)
        {
           

        }

        private void textBox2_TextChanged(object sender, EventArgs e)
        {

        }

      

    

        public bool CanFilterByDate
        {
            get { return chkDate.Checked ; }
        }

        public string CausaleFilter
        {
            get { return txtCausale.Text; }
        }

        public string PezzaFilter
        {
            get { return txtPezza.Text; }
        }

        public DateTime DateFromFilter
        {
            get { return dtpDa.DateTime; }
        }

        public DateTime DateToFilter
        {
            get { return dtpA.DateTime; }
        }

        public bool ViewAutogenerated
        {
            get { return chkAuto.Checked; }
        }

        #endregion

        private void chkDate_CheckedChanged(object sender, EventArgs e)
        {
            if (chkDate.Checked)
            {
                dtpDa.Enabled = true;
                dtpA.Enabled = true;
            }
            else
            {
                dtpDa.Enabled = false;
                dtpA.Enabled = false;
            }

        }

        #region IBasePresentation Membri di


        public BilancioFenealgest.Middleware.IOpenFileClass GetFolderBrowserDialog()
        {
            throw new NotImplementedException();
        }

        #endregion

        private void dataGridView1_CellMouseDoubleClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            _presenter.ShowScrittura();
        }

        private void dataGridView1_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            try
            {
                ScrittureDTO dto = dataGridView1.Rows[e.RowIndex].DataBoundItem as ScrittureDTO;
                if (dto != null)
                {
                    if (dto.AutoGenerated)
                    {
                        dataGridView1.Rows[e.RowIndex].DefaultCellStyle.ForeColor = Color.FromArgb(0x00, 0x66, 0xFF);
                    }
                    else
                    {
                        if (dto.IdContropartita == "A.D.1")
                            dataGridView1.Rows[e.RowIndex].DefaultCellStyle.ForeColor = Color.Blue;
                        else
                            dataGridView1.Rows[e.RowIndex].DefaultCellStyle.ForeColor = Color.Black;
                    }

                    if (dataGridView1.Columns[e.ColumnIndex].DataPropertyName == "Importo")
                    {
                       // dataGridView1.Rows[e.RowIndex].Cells[e.ColumnIndex].ValueType = typeof(decimal);
                        e.Value = dto.Importo.ToString("N2");
                    }
                }
            }
            catch (Exception)
            {


            }
        }

   

        public bool IsWaitPanelVisible
        {
            set
            {
                panel2.Visible = value;
                if (value)
                //panel2.BringToFront();
                {
                    panelControl1.Controls.SetChildIndex(this.panel2, 0);
                }
                Application.DoEvents();
            }
        }

        public void NotifyTaskLabel(string text)
        {
            lblTask.Text = text;
        }


        public void HidePanel()
        {
            panel2.Visible = false;
        }

        public bool GroupByConto
        {
            get { return checkBox1.Checked ; }
        }

    



        public bool IsDuplicateScritturaEnabled
        {
            set { cmdDouble.Enabled = value; }
        }

      

        private void tagliaScrittureToolStripMenuItem_Click(object sender, EventArgs e)
        {
            _presenter.PrepareToPaste();
        }

        private void dataGridView1_MouseUp(object sender, MouseEventArgs e)
        {
            _presenter.ChooseIfShowMenu(e.Location, e.Button == MouseButtons .Right);
        }



    

        public WIN.BILANCIO.PresentationLogicComponents.IFrmTaglia FrmTagliaView
        {
            get { return new FrmTaglia(banca1, banca2, banca3, banca4, banca5, banca6); }
        }

        public void ShowContextMenu(object sender, Point location)
        {
            contextMenuStrip1.Show(sender as Control, location);
        }

        public void HideContextMenu()
        {
            contextMenuStrip1.Hide();
        }

        public int SelectedRowsCount
        {
            get { return dataGridView1.SelectedRows.Count; }
        }

        private void eliminaScrittureToolStripMenuItem_Click(object sender, EventArgs e)
        {
            _presenter.PrepareToDelete();
        }



        #region IScrittureFormView Membri di


        public void SetScrittureTotalizzation(string total)
        {
           lblTotal .Text = total ;
        }

        #endregion

        #region IScrittureFormView Membri di


        public string MainHeader
        {
            get { return Properties.Settings.Default.Header; }
        }

        #endregion

        private void cmdExport1_Click(object sender, EventArgs e)
        {
            _presenter.ExportToExcel();
        }

        private void cmdRemove1_LinkClicked(object sender, DevExpress.XtraNavBar.NavBarLinkEventArgs e)
        {
            if (XtraMessageBox.Show("Sicuro di voler eliminare la scrittura?","Domanda", MessageBoxButtons.YesNo , MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes )
                _presenter.RemoveScrittura();
        }

        private void cmdClose1_LinkClicked(object sender, DevExpress.XtraNavBar.NavBarLinkEventArgs e)
        {
            this.Close();
        }

        private void cmdAdd1_LinkClicked(object sender, DevExpress.XtraNavBar.NavBarLinkEventArgs e)
        {
            _presenter.AddScrittura();
        }

        private void cmdDouble1_LinkClicked(object sender, DevExpress.XtraNavBar.NavBarLinkEventArgs e)
        {
            _presenter.Duplicate();
        }

        private void FrmScritture_Load(object sender, EventArgs e)
        {
            dtpA.EditValue = DateTime.Now;
            dtpDa.EditValue = DateTime.Now;
        }

        private void cmdFilter1_Click(object sender, EventArgs e)
        {
            _presenter.Filter();
        }

        private void cmdCancelFilter1_Click(object sender, EventArgs e)
        {
            _presenter.ReloadData();
        }


        public string Banca1
        {
            //get { return TipoBilanco.IsProvinciale ? Properties.Settings.Default.Banca1Nome : Properties.Settings.Default.Banca1NomeRegionale; }

            get
            {
                return banca1;
            }
        }

        public string Banca2
        {
           // get { return TipoBilanco.IsProvinciale ? Properties.Settings.Default.Banca2Nome : Properties.Settings.Default.Banca2NomeRegionale; }
            get
            {
                return banca2;
            }
        }


        public Middleware.ILookupList ComboEnte
        {
            get { return new DevDesktopCombo(cboEnte); }
        }

        public Middleware.ILookupList ComboSettore
        {
            get { return new DevDesktopCombo(cboSettore); }
        }

        public Middleware.ILookupList ComboPersonale
        {
             get { return new DevDesktopCombo(cboPersonale);  }
        }


        public string Banca3
        {
           // get { return TipoBilanco.IsProvinciale ? Properties.Settings.Default.Banca3Nome : Properties.Settings.Default.Banca3NomeRegionale; }
             get
            {
                return banca3;
            }
        }


        public string Banca4
        {
            // get { return TipoBilanco.IsProvinciale ? Properties.Settings.Default.Banca3Nome : Properties.Settings.Default.Banca3NomeRegionale; }
            get
            {
                return banca4;
            }
        }

        public string Banca5
        {
            // get { return TipoBilanco.IsProvinciale ? Properties.Settings.Default.Banca3Nome : Properties.Settings.Default.Banca3NomeRegionale; }
            get
            {
                return banca5;
            }
        }

        public string Banca6
        {
            // get { return TipoBilanco.IsProvinciale ? Properties.Settings.Default.Banca3Nome : Properties.Settings.Default.Banca3NomeRegionale; }
            get
            {
                return banca6;
            }
        }

        private void pictureEdit1_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void dataGridView1_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {


            if (dataGridView1.Columns[e.ColumnIndex].Name == "Pezza")
            {
               
                //riordino la lista
                IBindingList source = bindingSource1.DataSource as IBindingList;



                List<ScrittureDTO> dtos = new List<ScrittureDTO>();

                foreach (ScrittureDTO item in source)
                {
                    dtos.Add(item);
                }

                //annullo la binding source
                bindingSource1.DataSource = null;

                //ordino la lista
                dtos.Sort(ScrittureDTO.CompareScrittureByPezza);


                //reinserisco tutte le scritture nella lista
                SortableBindingList<ScrittureDTO> newSource = new SortableBindingList<ScrittureDTO>();
        
                foreach (ScrittureDTO a in dtos)
                {
                    newSource.Add(a);
                }

                bindingSource1.DataSource = newSource;

            }
        }

        private void cmdSaldoIni_LinkClicked(object sender, DevExpress.XtraNavBar.NavBarLinkEventArgs e)
        {
            _presenter.SetSaldo();
        }


        public IFrmContoView ImportoFormView
        {
           
            get { return new FrmImportoConto(); }
           
            
        }


        public bool IsSaldoInizialeEnabled
        {
            get
            {
                return cmdSaldoIni.Enabled;
            }
            set
            {
                cmdSaldoIni.Enabled = value;
            }
        }
    }
}

